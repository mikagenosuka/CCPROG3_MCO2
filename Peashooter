/** The abstract Peashooter represents the superclass at which all
 * peashooter variations derive from derive from
  *
  * @author Darryl Ac-ac & Brian Garcia
  * @version 1.1
  */
  

public abstract class Peashooter extends Plant {
    protected int health = 100;          // Base health of all variants
    protected final int damage = 20;     // Base attack of all variants
    protected final int cooldownTime = 3; // Base interval between attacks
    protected int attackCooldown = 0;     // Timer until next attack

    /**
     * Initializes the Peashooter's position by calling the superclass Plant constructor.
     *
     * @param row the row where the plant is placed
     * @param col the column where the plant is placed
     */
    public Peashooter(int row, int col) {
        super(row, col);
    }

    /* Behaviors */

    /**
     * Identifies the nearest zombie in front of the Peashooter on the same row
     *
     * @param model the current GameModel to scan for zombies
     * @return the first zombie found in the same row, or null if none found
     */
    protected Zombie identifyZombie(GameModel model) {
        for (int c = col + 1; c < GameModel.COLS; c++) {
            Zombie zombie = model.getTile(row, c).getZombie();
            if (zombie != null) {
                return zombie;
            }
        }
        return null;
    }

    /**
     * Performs the attack action for the Peashooter. If cooldown is done
     * and a zombie is in range, fires a projectile (defined by subclass)
     *
     * @param model the current GameModel to interact with
     */
    @Override
    public final void performAction(GameModel model) {
        if (attackCooldown > 0) {
            attackCooldown--;
            return;
        }

        Zombie target = identifyZombie(model);
        if (target != null) {
            fireProjectile(model); // subclass defines what projectile to shoot
            attackCooldown = cooldownTime;
        }
    }

    /**
     * Abstract method for firing a projectile â€” must be implemented by subclasses
     *
     * @param model the current GameModel to add the projectile to
     */
    protected abstract void fireProjectile(GameModel model);

    /**
     * Reduces Peashooter's health by the damage received
     *
     * @param dmg amount of damage from a zombie
     */
    public void takeDamage(int dmg) {
        this.health -= dmg;
    }

    /**
     * Checks if the Peashooter is dead
     *
     * @return true if health is 0 or below
     */
    public boolean isDead() {
        return health <= 0;
    }

    /**
     * Returns the current health of the Peashooter
     *
     * @return health value
     */
    public int getHealth() {
        return health;
    }
}


